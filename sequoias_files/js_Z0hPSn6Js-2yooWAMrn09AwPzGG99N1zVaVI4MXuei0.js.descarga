/*=============================================================================*\
 * Despliega el mapa en un panel con pestaÃ±as
\*============================================================================*/
(function($, Drupal) {
  Drupal.behaviors.debug_leaflet_with_bootstrap = {
    attach: function (context, settings) {
      $('[id=pestana2]', context).on('transitionend', function () {
        var mapid = $(this).find('[id^=leaflet-map]').attr('id');
        var map = settings.leaflet[mapid].lMap;
        map.invalidateSize();
      })
    }
  };
})(jQuery, Drupal);



(function($) {

  /*$('#id_mapa').click(function() {
      var mapid = $(this).find('[id^=leaflet-map]').attr('id');
      var map = settings.leaflet[mapid].lMap;
      map.invalidateSize();
  });*/

  /*
  $( ".btn" ).click(function() {
   $( ".panel-body" ).collapse();
  });


         $('.slick-carousel').slick({
           slidesToShow: 3,
           slidesToScroll: 2,
           dots: true,
         });
*/


  //$('.single-page-title').attr({'data-aos':'zoom-in','data-aos-duration':'1000','data-aos-easing':'ease-out-cubic'});
  //$('.subtitulo').attr({'data-aos':'zoom-in','data-aos-duration':'1000','data-aos-easing':'ease-out-cubic'});
  //$('#tabla_evento').attr({'data-aos':'zoom-in','data-aos-duration':'1000','data-aos-easing':'ease-out-cubic','data-aos-anchor':'#calendario_evento_month'});
  AOS.init({
     offset: 0,
  });

    var autenticado = $('.user-logged-in').length;
    var pagina = $('.path-frontpage').length;
    if(autenticado > 0){
      $(".path-frontpage #navbar").addClass("con_fondo");
      $(".path-frontpage #navbar").removeClass("sin_fondo");
    }else if(autenticado==0 && pagina > 0){
      $(".path-frontpage #navbar").addClass("sin_fondo");
      $(".path-frontpage #navbar").removeClass("con_fondo");
    } else{
    }

    $('.navbar-collapse a').click(function(){
            $(".navbar-collapse").collapse('hide');
    });

    $(window).scroll(function() {
      if(autenticado > 0){
      }else if(autenticado==0 && pagina > 0){
        if ($(".path-frontpage #navbar").offset().top > 80) {
            $(".path-frontpage #navbar").addClass("con_fondo");
            $(".path-frontpage #navbar").removeClass("sin_fondo");
        }
        else{
          $(".path-frontpage #navbar").removeClass("con_fondo");
          $(".path-frontpage #navbar").addClass("sin_fondo");
        }
      } else{
      }


      /*
       autenticado = $(".user-logged-in").length;
       pagina = $(".path-frontpage").length;
       alert(autenticado+":"+pagina);
       if(autenticado > 0){

       }
       if else(pagina>0 && autenticado == 0) {
         if ($(".path-frontpage #navbar").offset().top > 80) {
             $(".path-frontpage #navbar").addClass("con_fondo");
         }
         else{
           $(".path-frontpage #navbar").removeClass("con_fondo");
         }
       }
       else{
         alert("error");
       }*/

      /*
      alert($(location).attr('href'));
      if ($(".path-frontpage #navbar").offset().top > 80) {
          $(".path-frontpage #navbar").addClass("con_fondo");
      }
      else{
        $(".path-frontpage #navbar").removeClass("con_fondo");
      }*/
    });
})(jQuery);
;
/**
 * @file
 * Bootstrap Popovers.
 */

var Drupal = Drupal || {};

(function ($, Drupal, Bootstrap) {
  "use strict";

  var $document = $(document);

  /**
   * Extend the Bootstrap Popover plugin constructor class.
   */
  Bootstrap.extendPlugin('popover', function (settings) {
    return {
      DEFAULTS: {
        animation: !!settings.popover_animation,
        autoClose: !!settings.popover_auto_close,
        enabled: settings.popover_enabled,
        html: !!settings.popover_html,
        placement: settings.popover_placement,
        selector: settings.popover_selector,
        trigger: settings.popover_trigger,
        title: settings.popover_title,
        content: settings.popover_content,
        delay: parseInt(settings.popover_delay, 10),
        container: settings.popover_container
      }
    };
  });

  /**
   * Bootstrap Popovers.
   *
   * @todo This should really be properly delegated if selector option is set.
   */
  Drupal.behaviors.bootstrapPopovers = {
    $activePopover: null,
    attach: function (context) {
      // Immediately return if popovers are not available.
      if (!$.fn.popover || !$.fn.popover.Constructor.DEFAULTS.enabled) {
        return;
      }

      var _this = this;

      $document
        .on('show.bs.popover', '[data-toggle=popover]', function () {
          var $trigger = $(this);
          var popover = $trigger.data('bs.popover');

          // Only keep track of clicked triggers that we're manually handling.
          if (popover.options.originalTrigger === 'click') {
            if (_this.$activePopover && _this.getOption('autoClose') && !_this.$activePopover.is($trigger)) {
              _this.$activePopover.popover('hide');
            }
            _this.$activePopover = $trigger;
          }
        })
        // Unfortunately, :focusable is only made available when using jQuery
        // UI. While this would be the most semantic pseudo selector to use
        // here, jQuery UI may not always be loaded. Instead, just use :visible
        // here as this just needs some sort of selector here. This activates
        // delegate binding to elements in jQuery so it can work it's bubbling
        // focus magic since elements don't really propagate their focus events.
        // @see https://www.drupal.org/project/bootstrap/issues/3013236
        .on('focus.bs.popover', ':visible', function (e) {
          var $target = $(e.target);
          if (_this.$activePopover && _this.getOption('autoClose') && !_this.$activePopover.is($target) && !$target.closest('.popover.in')[0]) {
            _this.$activePopover.popover('hide');
            _this.$activePopover = null;
          }
        })
        .on('click.bs.popover', function (e) {
          var $target = $(e.target);
          if (_this.$activePopover && _this.getOption('autoClose') && !$target.is('[data-toggle=popover]') && !$target.closest('.popover.in')[0]) {
            _this.$activePopover.popover('hide');
            _this.$activePopover = null;
          }
        })
        .on('keyup.bs.popover', function (e) {
          if (_this.$activePopover && _this.getOption('autoClose') && e.which === 27) {
            _this.$activePopover.popover('hide');
            _this.$activePopover = null;
          }
        })
      ;

      var elements = $(context).find('[data-toggle=popover]').toArray();
      for (var i = 0; i < elements.length; i++) {
        var $element = $(elements[i]);
        var options = $.extend({}, $.fn.popover.Constructor.DEFAULTS, $element.data());

        // Store the original trigger.
        options.originalTrigger = options.trigger;

        // If the trigger is "click", then we'll handle it manually here.
        if (options.trigger === 'click') {
          options.trigger = 'manual';
        }

        // Retrieve content from a target element.
        var target = options.target || $element.is('a[href^="#"]') && $element.attr('href');
        var $target = $document.find(target).clone();
        if (!options.content && $target[0]) {
          $target.removeClass('visually-hidden hidden').removeAttr('aria-hidden');
          options.content = $target.wrap('<div/>').parent()[options.html ? 'html' : 'text']() || '';
        }

        // Initialize the popover.
        $element.popover(options);

        // Handle clicks manually.
        if (options.originalTrigger === 'click') {
          // To ensure the element is bound multiple times, remove any
          // previously set event handler before adding another one.
          $element
            .off('click.drupal.bootstrap.popover')
            .on('click.drupal.bootstrap.popover', function (e) {
              $(this).popover('toggle');
              e.preventDefault();
              e.stopPropagation();
            })
          ;
        }
      }
    },
    detach: function (context) {
      // Immediately return if popovers are not available.
      if (!$.fn.popover || !$.fn.popover.Constructor.DEFAULTS.enabled) {
        return;
      }

      // Destroy all popovers.
      $(context).find('[data-toggle="popover"]')
        .off('click.drupal.bootstrap.popover')
        .popover('destroy')
      ;
    },
    getOption: function(name, defaultValue, element) {
      var $element = element ? $(element) : this.$activePopover;
      var options = $.extend(true, {}, $.fn.popover.Constructor.DEFAULTS, ($element && $element.data('bs.popover') || {}).options);
      if (options[name] !== void 0) {
        return options[name];
      }
      return defaultValue !== void 0 ? defaultValue : void 0;
    }
  };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);
;
/**
 * @file
 * Bootstrap Tooltips.
 */

var Drupal = Drupal || {};

(function ($, Drupal, Bootstrap) {
  "use strict";

  /**
   * Extend the Bootstrap Tooltip plugin constructor class.
   */
  Bootstrap.extendPlugin('tooltip', function (settings) {
    return {
      DEFAULTS: {
        animation: !!settings.tooltip_animation,
        enabled: settings.tooltip_enabled,
        html: !!settings.tooltip_html,
        placement: settings.tooltip_placement,
        selector: settings.tooltip_selector,
        trigger: settings.tooltip_trigger,
        delay: parseInt(settings.tooltip_delay, 10),
        container: settings.tooltip_container
      }
    };
  });

  /**
   * Bootstrap Tooltips.
   *
   * @todo This should really be properly delegated if selector option is set.
   */
  Drupal.behaviors.bootstrapTooltips = {
    attach: function (context) {
      // Immediately return if tooltips are not available.
      if (!$.fn.tooltip || !$.fn.tooltip.Constructor.DEFAULTS.enabled) {
        return;
      }

      var elements = $(context).find('[data-toggle="tooltip"]').toArray();
      for (var i = 0; i < elements.length; i++) {
        var $element = $(elements[i]);
        var options = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, $element.data());
        $element.tooltip(options);
      }
    },
    detach: function (context) {
      // Immediately return if tooltips are not available.
      if (!$.fn.tooltip || !$.fn.tooltip.Constructor.DEFAULTS.enabled) {
        return;
      }

      // Destroy all tooltips.
      $(context).find('[data-toggle="tooltip"]').tooltip('destroy');
    }
  };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);
;
(function($, Drupal, drupalSettings) {

  Drupal.behaviors.leaflet = {
    attach: function(context, settings) {

      $.each(settings.leaflet, function(m, data) {
        $('#' + data.mapid, context).each(function() {
          let $container = $(this);
          let mapid = data.mapid;

          // If the attached context contains any leaflet maps, make sure we have a Drupal.leaflet_widget object.
          if ($container.data('leaflet') === undefined) {
            $container.data('leaflet', new Drupal.Leaflet(L.DomUtil.get(mapid), mapid, data.map));
            if (data.features.length > 0) {

              // Initialize the Drupal.Leaflet.[data.mapid] object,
              // for possible external interaction.
              Drupal.Leaflet[mapid].markers = {}

              // Add Leaflet Map Features.
              $container.data('leaflet').add_features(mapid, data.features, true);
            }

            // Add the leaflet map to our settings object to make it accessible.
            // @NOTE: This is used by the Leaflet Widget module.
            data.lMap = $container.data('leaflet').lMap;

            // Set map position features.
            $container.data('leaflet').fitbounds(mapid);
          }

          else {
            // If we already had a map instance, add new features.
            // @TODO Does this work? Needs testing.
            if (data.features !== undefined) {
              $container.data('leaflet').add_features(mapid, data.features);
            }
          }
          // After having initialized the Leaflet Map and added features,
          // allow other modules to get access to it via trigger.
          // NOTE: don't change this trigger arguments print, for back porting
          // compatibility.
          $(document).trigger('leaflet.map', [data.map, data.lMap, mapid]);

        });
      });
    }
  };

  // Once the Leaflet Map is loaded with its features.
  $(document).on('leaflet.map', function(e, settings, lMap, mapid) {

    // Executes once per mapid.
    $(document).once('leaflet_map_event_' + mapid).each(function() {
      // Set the start center and the start zoom, and initialize the reset_map control.
      if (!Drupal.Leaflet[mapid].start_center && !Drupal.Leaflet[mapid].start_zoom) {
        Drupal.Leaflet[mapid].start_center = Drupal.Leaflet[mapid].lMap.getCenter();
        Drupal.Leaflet[mapid].start_zoom = Drupal.Leaflet[mapid].lMap.getZoom();
      }

      // Add the Map Reset Control if requested.
      if (settings.settings.reset_map && settings.settings.reset_map.control && !Drupal.Leaflet[mapid].reset_control) {
        // Create the DIV to hold the control and call the mapResetControl()
        // constructor passing in this DIV.
        let mapResetControlDiv = document.createElement('div');
        Drupal.Leaflet[mapid].reset_control = Drupal.Leaflet.prototype.map_reset_control(mapResetControlDiv, mapid).addTo(Drupal.Leaflet[mapid].lMap);
      }

      // Add the Map Geocoder Control if requested.
      if (Drupal.Leaflet.prototype.map_geocoder_control) {
        let mapGeocoderControlDiv = document.createElement('div');
        Drupal.Leaflet[mapid].geocoder_control = Drupal.Leaflet.prototype.map_geocoder_control(mapGeocoderControlDiv, mapid).addTo(Drupal.Leaflet[mapid].lMap);
        let geocoder_settings = drupalSettings.leaflet[mapid].map.settings.geocoder.settings;
        Drupal.Leaflet.prototype.map_geocoder_control.autocomplete(mapid, geocoder_settings);
      }

      // Attach leaflet ajax popup listeners.
      Drupal.Leaflet[mapid].lMap.on('popupopen', function(e) {
        let element = e.popup._contentNode;
        let content = $('[data-leaflet-ajax-popup]', element);
        if (content.length) {
          let url = content.data('leaflet-ajax-popup');
          Drupal.ajax({url: url}).execute().done(function () {
            // Attach drupal behaviors on new content.
            Drupal.attachBehaviors(element, drupalSettings);
          });
        }
      });
    });
  });

  Drupal.Leaflet = function(container, mapid, map_definition) {
    this.container = container;
    this.mapid = mapid;
    this.map_definition = map_definition;
    this.settings = this.map_definition.settings;
    this.bounds = [];
    this.base_layers = {};
    this.overlays = {};
    this.lMap = null;
    this.start_center = null;
    this.start_zoom = null;
    this.layer_control = null;
    this.markers = {};
    this.initialise(mapid);
  };

  Drupal.Leaflet.prototype.initialise = function(mapid) {
    let self = this;
    // Instantiate a new Leaflet map.
    self.lMap = new L.Map(self.mapid, self.settings);

    // Set the public map object, to make it accessible from outside.
    Drupal.Leaflet[mapid] = {};
    // Define immediately the l.Map property, to make sub-methods mapid specific.
    Drupal.Leaflet[mapid].lMap = self.lMap;

    // Add map layers (base and overlay layers).
    let i = 0;
    for (let key in self.map_definition.layers) {
      let layer = self.map_definition.layers[key];
      // Distinguish between "base" and "overlay" layers.
      // Default to "base" in case "layer_type" has not been defined in hook_leaflet_map_info().
      layer.layer_type = (typeof layer.layer_type === 'undefined') ? 'base' : layer.layer_type;

      switch (layer.layer_type) {
        case 'overlay':
          let overlay_layer = self.create_layer(layer, key);
          let layer_hidden = (typeof layer.layer_hidden === "undefined") ? false : layer.layer_hidden;
          self.add_overlay(key, overlay_layer, layer_hidden, mapid);
          break;

        default:
          self.add_base_layer(key, layer, i, mapid);
          // Only the first base layer needs to be added to the map - all the
          // others are accessed via the layer switcher.
          if (i === 0) {
            i++;
          }
          break;
      }
      i++;
    }

    // Set initial view, fallback to displaying the whole world.
    if (self.settings.center && self.settings.zoom) {
      self.lMap.setView(new L.LatLng(self.settings.center.lat, self.settings.center.lon), self.settings.zoom);
    }
    else {
      self.lMap.fitWorld();
    }

    // Add attribution.
    if (self.settings.attributionControl && self.map_definition.attribution) {
      self.lMap.attributionControl.setPrefix(self.map_definition.attribution.prefix);
      self.attributionControl.addAttribution(self.map_definition.attribution.text);
    }

    // Add Fullscreen Control, if requested.
    if (self.settings.fullscreen_control) {
      self.lMap.addControl(new L.Control.Fullscreen());
    }

  };

  Drupal.Leaflet.prototype.initialise_layer_control = function(mapid) {
    let self = this;
    let count_layers = function(obj) {
      // Browser compatibility: Chrome, IE 9+, FF 4+, or Safari 5+.
      // @see http://kangax.github.com/es5-compat-table/
      return Object.keys(obj).length;
    };

    // Only add a layer switcher if it is enabled in settings, and we have
    // at least two base layers or at least one overlay.
    if (Drupal.Leaflet[mapid].layer_control == null && self.settings.layerControl && (count_layers(self.base_layers) > 1 || count_layers(self.overlays) > 0)) {
      // Instantiate layer control, using settings.layerControl as settings.
      Drupal.Leaflet[mapid].layer_control = new L.Control.Layers(self.base_layers, self.overlays, self.settings.layerControlOptions);
      self.lMap.addControl(Drupal.Leaflet[mapid].layer_control);
    }
  };

  Drupal.Leaflet.prototype.add_base_layer = function(key, definition, i, mapid) {
    let self = this;
    let map_layer = self.create_layer(definition, key);
    self.base_layers[key] = map_layer;
    // Only the first base layer needs to be added to the map - all the others are accessed via the layer switcher.
    if (i === 0) {
      self.lMap.addLayer(map_layer);
    }
    if (Drupal.Leaflet[mapid].layer_control == null) {
      self.initialise_layer_control(mapid);
    }
    else {
      // If we already have a layer control, add the new base layer to it.
      Drupal.Leaflet[mapid].layer_control.addBaseLayer(map_layer, key);
    }
    Drupal.Leaflet[mapid].base_layers = self.base_layers;
  };

  Drupal.Leaflet.prototype.add_overlay = function(label, layer, layer_hidden, mapid) {
    let self = this;
    self.overlays[label] = layer;
    if (!layer_hidden) {
      Drupal.Leaflet[mapid].lMap.addLayer(layer);
    }

    if (Drupal.Leaflet[mapid].layer_control == null) {
      self.initialise_layer_control(mapid);
    }
    else {
      // If we already have a layer control, add the new overlay to it.
      Drupal.Leaflet[mapid].layer_control.addOverlay(layer, label);
    }
    Drupal.Leaflet[mapid].overlays = self.overlays;

  };

  Drupal.Leaflet.prototype.add_features = function(mapid, features, initial) {
    let self = this;
    for (let i = 0; i < features.length; i++) {
      let feature = features[i];
      let lFeature;

      // dealing with a layer group
      if (feature.group) {
        let lGroup = self.create_feature_group(feature);
        for (let groupKey in feature.features) {
          let groupFeature = feature.features[groupKey];
          lFeature = self.create_feature(groupFeature);
          if (lFeature !== undefined) {
            if (lFeature.setStyle) {
              feature.path = feature.path ? (feature.path instanceof Object ? feature.path : JSON.parse(feature.path)) : {};
              lFeature.setStyle(feature.path);
            }
            if (groupFeature.popup) {
              lFeature.bindPopup(groupFeature.popup);
            }
            lGroup.addLayer(lFeature);
          }
        }

        // Add the group to the layer switcher.
        self.add_overlay(feature.label, lGroup, false, mapid);
      }
      else {
        lFeature = self.create_feature(feature);
        if (lFeature !== undefined) {
          if (lFeature.setStyle) {
            feature.path = feature.path ? (feature.path instanceof Object ? feature.path : JSON.parse(feature.path)) : {};
            lFeature.setStyle(feature.path);
          }
          self.lMap.addLayer(lFeature);

          if (feature.popup) {
            lFeature.bindPopup(feature.popup);
          }
        }
      }

      // Allow others to do something with the feature that was just added to the map.
      $(document).trigger('leaflet.feature', [lFeature, feature, self]);
    }

    // Allow plugins to do things after features have been added.
    $(document).trigger('leaflet.features', [initial || false, self])
  };

  Drupal.Leaflet.prototype.create_feature_group = function(feature) {
    return new L.LayerGroup();
  };

  Drupal.Leaflet.prototype.create_feature = function(feature) {
    let self = this;
    let lFeature;
    switch (feature.type) {
      case 'point':
        lFeature = self.create_point(feature);
        break;

      case 'linestring':
        lFeature = self.create_linestring(feature);
        break;

      case 'polygon':
        lFeature = self.create_polygon(feature);
        break

      case 'multipolygon':
        lFeature = self.create_multipolygon(feature);
        break;

      case 'multipolyline':
        lFeature = self.create_multipoly(feature);
        break;

      case 'json':
        lFeature = self.create_json(feature.json);
        break;

      case 'multipoint':
      case 'geometrycollection':
        lFeature = self.create_collection(feature);
        break;

      default:
        return; // Crash and burn.
    }

    let options = {};
    if (feature.options) {
      for (let option in feature.options) {
        if (feature.options.hasOwnProperty(option)) {
          options[option] = feature.options[option];
        }
      }
      lFeature.setStyle(options);
    }

    if (feature.entity_id) {

      // Generate the markers object index based on entity id (and geofield
      // cardinality), and add the marker to the markers object.
      let entity_id = feature.entity_id;
      if (self.map_definition.geofield_cardinality && self.map_definition.geofield_cardinality !== 1) {
        let i = 0;
        while (Drupal.Leaflet[self.mapid].markers[entity_id + '-' + i]) {
          i++;
        }
        Drupal.Leaflet[self.mapid].markers[entity_id + '-' + i] = lFeature;
      }
      else {
        Drupal.Leaflet[self.mapid].markers[entity_id] = lFeature;
      }
    }
    return lFeature;
  };

  Drupal.Leaflet.prototype.create_layer = function(layer, key) {
    let self = this;
    let map_layer = new L.TileLayer(layer.urlTemplate);
    if (layer.type === 'wms') {
      map_layer = new L.tileLayer.wms(layer.urlTemplate, layer.options);
    }
    map_layer._leaflet_id = key;

    if (layer.options) {
      for (let option in layer.options) {
        map_layer.options[option] = layer.options[option];
      }
    }

    // Layers served from TileStream need this correction in the y coordinates.
    // TODO: Need to explore this more and find a more elegant solution.
    if (layer.type === 'tilestream') {
      map_layer.getTileUrl = function(tilePoint) {
        self._adjustTilePoint(tilePoint);
        let zoom = self._getZoomForUrl();
        return L.Util.template(self._url, L.Util.extend({
          s: self._getSubdomain(tilePoint),
          z: zoom,
          x: tilePoint.x,
          y: Math.pow(2, zoom) - tilePoint.y - 1
        }, self.options));
      }
    }
    return map_layer;
  };

  Drupal.Leaflet.prototype.create_icon = function(options) {
    let icon = new L.Icon({iconUrl: options.iconUrl});

    // Override applicable marker defaults.
    if (options.iconSize) {
      icon.options.iconSize = new L.Point(parseInt(options.iconSize.x), parseInt(options.iconSize.y));
    }
    if (options.iconAnchor && options.iconAnchor.x && options.iconAnchor.y) {
      icon.options.iconAnchor = new L.Point(parseFloat(options.iconAnchor.x), parseFloat(options.iconAnchor.y));
    }
    if (options.popupAnchor && options.popupAnchor.x && options.popupAnchor.y) {
      icon.options.popupAnchor = new L.Point(parseInt(options.popupAnchor.x), parseInt(options.popupAnchor.y));
    }
    if (options.shadowUrl) {
      icon.options.shadowUrl = options.shadowUrl;
    }
    if (options.shadowSize && options.shadowSize.x && options.shadowSize.y) {
      icon.options.shadowSize = new L.Point(parseInt(options.shadowSize.x), parseInt(options.shadowSize.y));
    }
    if (options.shadowAnchor && options.shadowAnchor.x && options.shadowAnchor.y) {
      icon.options.shadowAnchor = new L.Point(parseInt(options.shadowAnchor.x), parseInt(options.shadowAnchor.y));
    }
    if (options.className) {
      icon.options.className = options.className;
    }

    return icon;
  };

  Drupal.Leaflet.prototype.create_divicon = function (options) {
    let html_class = options.html_class || '';
    let icon = new L.DivIcon({html: options.html, className: html_class});

    // override applicable marker defaults
    if (options.iconSize) {
      icon.options.iconSize = new L.Point(parseInt(options.iconSize.x, 10), parseInt(options.iconSize.y, 10));
    }
    if (options.iconAnchor) {
      icon.options.iconAnchor = new L.Point(parseFloat(options.iconAnchor.x), parseFloat(options.iconAnchor.y));
    }

    return icon;
  };

  Drupal.Leaflet.prototype.create_point = function(marker) {
    let self = this;
    let latLng = new L.LatLng(marker.lat, marker.lon);
    self.bounds.push(latLng);
    let lMarker;
    let tooltip = marker.label ? marker.label.replace(/<[^>]*>/g, '').trim() : '';
    let options = {
      title: tooltip
    };

    if (marker.alt !== undefined) {
      options.alt = marker.alt;
    }

    function checkImage(imageSrc, setIcon, logError) {
      let img = new Image();
      img.src = imageSrc;
      img.onload = setIcon;
      img.onerror = logError;
    }

    lMarker = new L.Marker(latLng, options);

    if (marker.icon) {
      if (marker.icon.iconType && marker.icon.iconType === 'html' && marker.icon.html) {
        let icon = self.create_divicon(marker.icon);
        lMarker.setIcon(icon);
      }
      else if (marker.icon.iconType && marker.icon.iconType === 'circle_marker') {
        try {
          options = marker.icon.options ? JSON.parse(marker.icon.options) : {};
          options.radius = options.radius ? parseInt(options['radius']) : 10;
        }
        catch (e) {
          options = {};
        }
        lMarker = new L.CircleMarker(latLng, options);
      }
      else if (marker.icon.iconUrl) {
        checkImage(marker.icon.iconUrl,
          // Success loading image.
          function() {
            marker.icon.iconSize = marker.icon.iconSize || {};
            marker.icon.iconSize.x = marker.icon.iconSize.x || this.naturalWidth;
            marker.icon.iconSize.y = marker.icon.iconSize.y || this.naturalHeight;
            if (marker.icon.shadowUrl) {
              marker.icon.shadowSize = marker.icon.shadowSize || {};
              marker.icon.shadowSize.x = marker.icon.shadowSize.x || this.naturalWidth;
              marker.icon.shadowSize.y = marker.icon.shadowSize.y || this.naturalHeight;
            }
            let icon = self.create_icon(marker.icon);
            lMarker.setIcon(icon);
          },
          // Error loading image.
          function(err) {
            console.log("Leaflet: The Icon Image doesn't exist at the requested path: " + marker.icon.iconUrl);
          });
      }
    }

    return lMarker;
  };

  Drupal.Leaflet.prototype.create_linestring = function(polyline) {
    let self = this;
    let latlngs = [];
    for (let i = 0; i < polyline.points.length; i++) {
      let latlng = new L.LatLng(polyline.points[i].lat, polyline.points[i].lon);
      latlngs.push(latlng);
      self.bounds.push(latlng);
    }
    return new L.Polyline(latlngs);
  };

  Drupal.Leaflet.prototype.create_collection = function(collection) {
    let self = this;
    let layers = new L.featureGroup();
    for (let x = 0; x < collection.component.length; x++) {
      layers.addLayer(self.create_feature(collection.component[x]));
    }
    return layers;
  };

  Drupal.Leaflet.prototype.create_polygon = function(polygon) {
    let self = this;
    let latlngs = [];
    for (let i = 0; i < polygon.points.length; i++) {
      let latlng = new L.LatLng(polygon.points[i].lat, polygon.points[i].lon);
      latlngs.push(latlng);
      self.bounds.push(latlng);
    }
    return new L.Polygon(latlngs);
  };

  Drupal.Leaflet.prototype.create_multipolygon = function(multipolygon) {
    let self = this;
    let polygons = [];
    for (let x = 0; x < multipolygon.component.length; x++) {
      let latlngs = [];
      let polygon = multipolygon.component[x];
      for (let i = 0; i < polygon.points.length; i++) {
        let latlng = [polygon.points[i].lat, polygon.points[i].lon];
        latlngs.push(latlng);
        self.bounds.push(latlng);
      }
      polygons.push(latlngs);
    }
    return new L.Polygon(polygons);
  };

  Drupal.Leaflet.prototype.create_multipoly = function(multipoly) {
    let self = this;
    let polygons = [];
    for (let x = 0; x < multipoly.component.length; x++) {
      let latlngs = [];
      let polygon = multipoly.component[x];
      for (let i = 0; i < polygon.points.length; i++) {
        let latlng = new L.LatLng(polygon.points[i].lat, polygon.points[i].lon);
        latlngs.push(latlng);
        self.bounds.push(latlng);
      }
      polygons.push(latlngs);
    }
    if (multipoly.multipolyline) {
      return new L.polyline(polygons);
    }
    else {
      return new L.polygon(polygons);
    }
  };

  Drupal.Leaflet.prototype.create_json = function(json) {
    let lJSON = new L.GeoJSON();

    lJSON.options.onEachFeature = function(feature, layer) {
      for (let layer_id in layer._layers) {
        for (let i in layer._layers[layer_id]._latlngs) {
          Drupal.Leaflet.bounds.push(layer._layers[layer_id]._latlngs[i]);
        }
      }
      if (feature.properties.style) {
        layer.setStyle(feature.properties.style);
      }
      if (feature.properties.leaflet_id) {
        layer._leaflet_id = feature.properties.leaflet_id;
      }
      if (feature.properties.popup) {
        layer.bindPopup(feature.properties.popup);
      }
    };

    lJSON.addData(json);
    return lJSON;
  };

  // Set Map position, fitting Bounds in case of more than one feature.
  // @NOTE: This method used by Leaflet Markecluster module (don't remove/rename)
  Drupal.Leaflet.prototype.fitbounds = function(mapid) {
    let self = this;
    let start_zoom, start_center;
    // Fit Bounds if both them and features exist.
    if (self.bounds.length > 0) {
      let bounds = new L.LatLngBounds(self.bounds);
      Drupal.Leaflet[mapid].lMap.fitBounds(bounds);
      start_center = bounds.getCenter();

      // In case of single result, or Map Zoom Forced, use the custom Map Zoom.
      if ((self.bounds.length === 1 || self.settings.map_position_force) && self.settings.zoom) {
        start_zoom = self.settings.zoom;
        Drupal.Leaflet[mapid].lMap.setZoom(start_zoom);
        // In case of Map Center Forced, use it.
        if (self.settings.center && self.settings.map_position_force) {
          start_center = L.latLng(self.settings.center);
          Drupal.Leaflet[mapid].lMap.setView(start_center);
        }
      }
      else {
        start_zoom = Drupal.Leaflet[mapid].lMap.getBoundsZoom(bounds);
      }
      // In case of map initial position not forced, and zooFiner not null/neutral,
      // adapt the Map Zoom and the Start Zoom accordingly.
      if (!self.settings.map_position_force && self.settings.hasOwnProperty('zoomFiner') && self.settings['zoomFiner'] !== 0) {
        start_zoom += parseFloat(self.settings['zoomFiner']);
        Drupal.Leaflet[mapid].lMap.setZoom(start_zoom);
      }
    }
    // Set the map start zoom and center.
    Drupal.Leaflet[mapid].start_zoom = start_zoom;
    Drupal.Leaflet[mapid].start_center = start_center;
  };

  Drupal.Leaflet.prototype.map_reset = function(mapid) {
    Drupal.Leaflet[mapid].lMap.setView(Drupal.Leaflet[mapid].start_center, Drupal.Leaflet[mapid].start_zoom);
  };

  Drupal.Leaflet.prototype.map_reset_control = function(controlDiv, mapid) {
    let self = this;
    let reset_map_control_settings = drupalSettings.leaflet[mapid].map.settings.reset_map;
    let control = new L.Control({position: reset_map_control_settings.position});
    control.onAdd = function() {
      // Set CSS for the control border.
      let controlUI = L.DomUtil.create('div','resetzoom')
      controlUI.style.backgroundColor = '#fff';
      controlUI.style.border = '2px solid #fff';
      controlUI.style.borderRadius = '3px';
      controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
      controlUI.style.cursor = 'pointer';
      controlUI.style.margin = '6px';
      controlUI.style.textAlign = 'center';
      controlUI.title = Drupal.t('Click to reset the map to its initial state');
      controlUI.id = 'leaflet-map--' + mapid + '--reset-control';
      controlUI.disabled = true;
      controlDiv.appendChild(controlUI);

      // Set CSS for the control interior.
      let controlText = document.createElement('div');
      controlText.style.color = 'rgb(25,25,25)';
      controlText.style.fontSize = '1.1em';
      controlText.style.lineHeight = '28px';
      controlText.style.paddingLeft = '5px';
      controlText.style.paddingRight = '5px';
      controlText.innerHTML = Drupal.t('Reset Map');
      controlUI.appendChild(controlText);

      L.DomEvent
        .disableClickPropagation(controlUI)
        .addListener(controlUI, 'click', function() {
          self.map_reset(mapid);
        },controlUI);
      return controlUI;
    };
    return control;
  };

})(jQuery, Drupal, drupalSettings);
;
(function ($) {

  Drupal.Leaflet.prototype._create_layer_orig = Drupal.Leaflet.prototype.create_layer;

  Drupal.Leaflet.prototype.create_layer = function(layer, key) {
    if (layer.type === 'quad') {
      var mapLayer = new L.TileLayerQuad(layer.urlTemplate, layer.options);
      mapLayer._leaflet_id = key;
      return mapLayer;
    }

    if (layer.type === 'google' && layer.options.detectRetina && L.Browser.retina) {
      layer.urlTemplate += '&style=high_dpi&w=512';
      layer.options.tileSize = 512;
      var mapLayer = new L.TileLayer(layer.urlTemplate, layer.options);
      mapLayer._leaflet_id = key;
      return mapLayer;
    }
    // Default to the original code;
    return Drupal.Leaflet.prototype._create_layer_orig(layer, key);
  };

})(jQuery);

L.TileLayerQuad = L.TileLayer.extend({

  getTileUrl: function(tilePoint) {
    this._adjustTilePoint(tilePoint);

    return L.Util.template(this._url, L.extend({
      s: this._getSubdomain(tilePoint),
      q: this._xyzToQuad(tilePoint.x, tilePoint.y, this._getZoomForUrl())
    }, this.options));
  },

  /** Convert xyz tile coordinates to a single quadtree key string.
   *
   * The length of the quadkey equals the zoom level. Note: zoom > 0.
   *
   * Adapted from http://msdn.microsoft.com/en-us/library/bb259689.aspx
   */
  _xyzToQuad: function(x, y, zoom) {
    var quadKey = '', digit, mask;
    for (var z = zoom; z > 0; z--) {
      digit = 0;
      mask = 1 << (z - 1);
      if ((x & mask) !== 0) {
        digit = 1;
      }
      if ((y & mask) !== 0) {
        digit += 2;
      }
      // At this point digit equals 0, 1, 2 or 3. Append digit to quad key and
      // advance to the next zoom level to calculate the next digit.
      quadKey += digit;
    }
    return quadKey;
  }
});

;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

Drupal.debounce = function (func, wait, immediate) {
  var timeout = void 0;
  var result = void 0;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var context = this;
    var later = function later() {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};;
